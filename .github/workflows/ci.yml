name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
 
jobs: 
  test:
    runs-on: ubuntu-latest
    
    services: # startar databas service
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: product_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Wait for PostgreSQL
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        echo "PostgreSQL is ready!"

    - name: Compile backend                                             #backend tester
      run: mvn -f backend/backend-java/pom.xml compile

    - name: Run backend tests
      run: mvn -f backend/backend-java/pom.xml test -Dspring.profiles.active=test
      env:
        DB_USER: postgres
        DB_PASS: postgres
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/product_db
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
        SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install frontend dependencies ##frontend tester
      working-directory: frontend
      run: |
        rm -rf node_modules package-lock.json
        npm install --legacy-peer-deps
        npm ls react-router-dom || echo "react-router-dom not found, installing..."
        npm install react-router-dom --legacy-peer-deps

    - name: Run frontend tests
      working-directory: frontend
      run: npm test -- --watchAll=false